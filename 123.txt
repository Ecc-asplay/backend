func TestUpdateIsPrivacyAPI(t *testing.T) {
	userData := createTestUser(t, CreateUserRequest{
		Username: gofakeit.Name(),
		Email:    gofakeit.Email(),
		Birth: pgtype.Date{
			Time:  util.RandomDate(),
			Valid: true,
		},
		Gender:   util.RandomGender(),
		Password: util.RandomString(20),
	})
	token := "Bearer " + userData.Access_Token
	testCases := []struct {
		name          string
		token         string
		body          UpdatePrivacyRequest
		checkResponse func(recorder *httptest.ResponseRecorder)
	}{
		{
			name:  "OK",
			token: token,
			body: UpdatePrivacyRequest{
				IsPrivacy: !userData.User_Information.IsPrivacy,
			},
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusOK, recorder.Code)
			},
		},
		{
			name: "トークンない",
			body: UpdatePrivacyRequest{
				IsPrivacy: !userData.User_Information.IsPrivacy,
			},
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusUnauthorized, recorder.Code)
			},
		},
		{
			name:  "プライバシー更新ない",
			token: token,
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusInternalServerError, recorder.Code)
			},
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			recorder := httptest.NewRecorder()
			server := newTestServer(t)
			require.NotEmpty(t, server)

			data, err := json.Marshal(tc.body)
			require.NoError(t, err)

			request, err := http.NewRequest(http.MethodPut, "/users/privacy", bytes.NewReader(data))
			require.NoError(t, err)
			require.NotEmpty(t, request)

			request.Header.Set("Content-Type", "application/json")
			request.Header.Set("Authorization", tc.token)

			server.router.ServeHTTP(recorder, request)
			require.NotEmpty(t, recorder)
            
			tc.checkResponse(recorder)
			fmt.Println(" ")
		})
	}
}

func TestUpdateNameAPI(t *testing.T) {
	userData := createTestUser(t, CreateUserRequest{
		Username: gofakeit.Name(),
		Email:    gofakeit.Email(),
		Birth: pgtype.Date{
			Time:  util.RandomDate(),
			Valid: true,
		},
		Gender:   util.RandomGender(),
		Password: util.RandomString(20),
	})
	token := "Bearer " + userData.Access_Token
	testCases := []struct {
		name          string
		body          NewUsernameRequest
		token         string
		checkResponse func(recorder *httptest.ResponseRecorder)
	}{
		{
			name:  "OK",
			token: token,
			body: NewUsernameRequest{
				NewUsername: gofakeit.Name(),
			},
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusOK, recorder.Code)
			},
		},
		{
			name: "トークンない",
			body: NewUsernameRequest{
				NewUsername: gofakeit.Name(),
			},
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusUnauthorized, recorder.Code)
			},
		},
		{
			name:  "新しい名前ない",
			token: token,
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusInternalServerError, recorder.Code)
			},
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			recorder := httptest.NewRecorder()
			server := newTestServer(t)
			require.NotEmpty(t, server)
			data, err := json.Marshal(tc.body)
			require.NoError(t, err)
			require.NotEmpty(t, data)
			request, err := http.NewRequest(http.MethodPut, "/users/name", bytes.NewReader(data))
			require.NoError(t, err)
			require.NotEmpty(t, request)
			request.Header.Set("Content-Type", "application/json")
			request.Header.Set("Authorization", tc.token)
			server.router.ServeHTTP(recorder, request)
			require.NotEmpty(t, recorder)
			tc.checkResponse(recorder)
			fmt.Println(" ")
		})
	}
}

func TestLoginUser(t *testing.T) {
	email := gofakeit.Email()
	userLoginData := createTestUser(t, CreateUserRequest{
		Username: gofakeit.Name(),
		Email:    email,
		Birth: pgtype.Date{
			Time:  util.RandomDate(),
			Valid: true,
		},
		Gender:   gofakeit.Gender(),
		Password: "123qwecc",
	})
	testCases := []struct {
		name          string
		body          LoginRequest
		checkResponse func(recorder *httptest.ResponseRecorder)
	}{
		{
			name: "OK",
			body: LoginRequest{
				Email:    userLoginData.User_Information.Email,
				Password: "123qwecc",
			},
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusOK, recorder.Code)
			},
		},
		{
			name: "メールない",
			body: LoginRequest{
				Password: "123qwecc",
			},
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusInternalServerError, recorder.Code)
			},
		},
		{
			name: "無効なデータ（メール&パスワード）",
			body: LoginRequest{
				Email:    gofakeit.Email(),
				Password: "123qwecc",
			},
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusInternalServerError, recorder.Code)
			},
		},
		{
			name: "パスワードない",
			body: LoginRequest{
				Email: userLoginData.User_Information.Email,
			},
			checkResponse: func(recorder *httptest.ResponseRecorder) {
				require.Equal(t, http.StatusInternalServerError, recorder.Code)
			},
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			recorder := httptest.NewRecorder()
			server := newTestServer(t)
			require.NotEmpty(t, server)
			data, err := json.Marshal(tc.body)
			require.NoError(t, err)
			request, err := http.NewRequest(http.MethodPost, "/login", bytes.NewReader(data))
			require.NoError(t, err)
			require.NotEmpty(t, request)
			server.router.ServeHTTP(recorder, request)
			require.NotEmpty(t, recorder)
			tc.checkResponse(recorder)
			fmt.Println(" ")
		})
	}
}

name: Run go test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: asplay
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7.4.1-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.22
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Install golang-migrate
      run: |
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.1/migrate.linux-amd64.tar.gz | tar xvz
        elif [ "$ARCH" = "aarch64" ]; then
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.1/migrate.linux-arm64.tar.gz | tar xvz
        else
          echo "Unsupported architecture: $ARCH" && exit 1
        fi
        chmod +x migrate
        sudo mv migrate /usr/local/bin/
        which migrate

    - name: Create app.env
      run: |
        echo "ENVIRONMENT=${{secrets.ENVIRONMENT}}" >> app.env
        echo "DB_DRIVER=${{secrets.DB_DRIVER}}" >> app.env
        echo "DB_SOURCE=${{secrets.DB_SOURCE}}" >> app.env
        echo "FRONT_ADDRESS=${{secrets.FRONT_ADDRESS}}" >> app.env
        echo "ALLOW_HEADERS=${{secrets.ALLOW_HEADERS}}" >> app.env
        echo "REDIS_ADDRESS=${{secrets.REDIS_ADDRESS}}" >> app.env
        echo "REDIS_PASSWORD=${{secrets.REDIS_PASSWORD}}" >> app.env
        echo "MIGRATION_URL=${{secrets.MIGRATION_URL}}" >> app.env
        echo "HTTP_SERVER_ADDRESS=${{secrets.HTTP_SERVER_ADDRESS}}" >> app.env
        echo "TOKEN_SYMMETRIC_KEY=${{secrets.TOKEN_SYMMETRIC_KEY}}" >> app.env
        echo "ACCESS_TOKEN_DURATION=${{secrets.ACCESS_TOKEN_DURATION}}" >> app.env
        echo "AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY}}" >> app.env
        echo "AWS_SECRET_KEY=${{secrets.AWS_SECRET_KEY}}" >> app.env
        echo "SMTP_HOST=${{secrets.SMTP_HOST}}" >> app.env
        echo "SMTP_PORT=${{secrets.SMTP_PORT}}" >> app.env
        echo "SMTP_USER=${{secrets.SMTP_USER}}" >> app.env
        echo "SMTP_PASSWORD=${{secrets.SMTP_PASSWORD}}" >> app.env
        echo "SMTP_FROM_ADDRESS=${{secrets.SMTP_FROM_ADDRESS}}" >> app.env
        echo "SMTP_FROMNAME=${{secrets.SMTP_FROMNAME}}" >> app.env

    - name: Run migrations
      run: make migrateup

    - name: Test
      run: make test

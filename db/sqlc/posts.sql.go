// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO POSTS (
    POST_ID,
    USER_ID,
    SHOW_ID,
    TITLE,
    FEEL,
    CONTENT,
    REACTION,
    IMAGE,
    IS_SENSITIVE,
    STATUS
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
)
`

type CreatePostParams struct {
	PostID      uuid.UUID   `json:"post_id"`
	UserID      uuid.UUID   `json:"user_id"`
	ShowID      string      `json:"show_id"`
	Title       string      `json:"title"`
	Feel        string      `json:"feel"`
	Content     string      `json:"content"`
	Reaction    int32       `json:"reaction"`
	Image       [][]byte    `json:"image"`
	IsSensitive pgtype.Bool `json:"is_sensitive"`
	Status      string      `json:"status"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.Exec(ctx, createPost,
		arg.PostID,
		arg.UserID,
		arg.ShowID,
		arg.Title,
		arg.Feel,
		arg.Content,
		arg.Reaction,
		arg.Image,
		arg.IsSensitive,
		arg.Status,
	)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM POSTS
WHERE
    USER_ID = $1
    AND POST_ID = $2
`

type DeletePostParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.db.Exec(ctx, deletePost, arg.UserID, arg.PostID)
	return err
}

const getPostForUser = `-- name: GetPostForUser :one
SELECT
    user_id, post_id, show_id, title, feel, content, reaction, image, is_sensitive, status, created_at, updated_at
FROM
    POSTS
WHERE
    USER_ID = $1
`

func (q *Queries) GetPostForUser(ctx context.Context, userID uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPostForUser, userID)
	var i Post
	err := row.Scan(
		&i.UserID,
		&i.PostID,
		&i.ShowID,
		&i.Title,
		&i.Feel,
		&i.Content,
		&i.Reaction,
		&i.Image,
		&i.IsSensitive,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsList = `-- name: GetPostsList :many
SELECT
    user_id, post_id, show_id, title, feel, content, reaction, image, is_sensitive, status, created_at, updated_at
FROM
    POSTS
ORDER BY
    CREATED_AT DESC
`

func (q *Queries) GetPostsList(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.UserID,
			&i.PostID,
			&i.ShowID,
			&i.Title,
			&i.Feel,
			&i.Content,
			&i.Reaction,
			&i.Image,
			&i.IsSensitive,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePosts = `-- name: UpdatePosts :exec
UPDATE POSTS
SET
    SHOW_ID = $3,
    TITLE = $4,
    FEEL = $5,
    CONTENT = $6,
    REACTION = $7,
    IMAGE = $8,
    IS_SENSITIVE = $9
WHERE
    USER_ID = $1
    AND POST_ID = $2 RETURNING user_id, post_id, show_id, title, feel, content, reaction, image, is_sensitive, status, created_at, updated_at
`

type UpdatePostsParams struct {
	UserID      uuid.UUID   `json:"user_id"`
	PostID      uuid.UUID   `json:"post_id"`
	ShowID      string      `json:"show_id"`
	Title       string      `json:"title"`
	Feel        string      `json:"feel"`
	Content     string      `json:"content"`
	Reaction    int32       `json:"reaction"`
	Image       [][]byte    `json:"image"`
	IsSensitive pgtype.Bool `json:"is_sensitive"`
}

func (q *Queries) UpdatePosts(ctx context.Context, arg UpdatePostsParams) error {
	_, err := q.db.Exec(ctx, updatePosts,
		arg.UserID,
		arg.PostID,
		arg.ShowID,
		arg.Title,
		arg.Feel,
		arg.Content,
		arg.Reaction,
		arg.Image,
		arg.IsSensitive,
	)
	return err
}

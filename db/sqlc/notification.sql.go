// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notification.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO NOTIFICATION (
    USER_ID,
    CONTENT,
    ICON
) VALUES (
    $1,
    $2,
    $3
) RETURNING user_id, content, icon, is_read, created_at
`

type CreateNotificationParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Content string    `json:"content"`
	Icon    []byte    `json:"icon"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification, arg.UserID, arg.Content, arg.Icon)
	var i Notification
	err := row.Scan(
		&i.UserID,
		&i.Content,
		&i.Icon,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const getNotification = `-- name: GetNotification :many
SELECT
    user_id, content, icon, is_read, created_at
FROM
    NOTIFICATION
WHERE
    USER_ID = $1
`

func (q *Queries) GetNotification(ctx context.Context, userID uuid.UUID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotification, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.UserID,
			&i.Content,
			&i.Icon,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotification = `-- name: UpdateNotification :many
UPDATE NOTIFICATION
SET
    IS_READ = TRUE
WHERE
    USER_ID = $1 RETURNING user_id, content, icon, is_read, created_at
`

func (q *Queries) UpdateNotification(ctx context.Context, userID uuid.UUID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, updateNotification, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.UserID,
			&i.Content,
			&i.Icon,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

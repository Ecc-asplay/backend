// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments_reaction.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCommentsReaction = `-- name: CreateCommentsReaction :one
INSERT INTO COMMENTS_REACTION (
    USER_ID,
    COMMENT_ID,
    C_REACTION_THANKS,
    C_REACTION_HELPFUL,
    C_REACTION_USEFUL,
    C_REACTION_HEART
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING user_id, comment_id, c_reaction_thanks, c_reaction_heart, c_reaction_helpful, c_reaction_useful, created_at
`

type CreateCommentsReactionParams struct {
	UserID           uuid.UUID   `json:"user_id"`
	CommentID        uuid.UUID   `json:"comment_id"`
	CReactionThanks  pgtype.Bool `json:"c_reaction_thanks"`
	CReactionHelpful pgtype.Bool `json:"c_reaction_helpful"`
	CReactionUseful  pgtype.Bool `json:"c_reaction_useful"`
	CReactionHeart   pgtype.Bool `json:"c_reaction_heart"`
}

func (q *Queries) CreateCommentsReaction(ctx context.Context, arg CreateCommentsReactionParams) (CommentsReaction, error) {
	row := q.db.QueryRow(ctx, createCommentsReaction,
		arg.UserID,
		arg.CommentID,
		arg.CReactionThanks,
		arg.CReactionHelpful,
		arg.CReactionUseful,
		arg.CReactionHeart,
	)
	var i CommentsReaction
	err := row.Scan(
		&i.UserID,
		&i.CommentID,
		&i.CReactionThanks,
		&i.CReactionHeart,
		&i.CReactionHelpful,
		&i.CReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCommentsReaction = `-- name: DeleteCommentsReaction :exec
DELETE FROM COMMENTS_REACTION
WHERE 
    USER_ID = $1 AND COMMENT_ID = $2
    AND NOT (C_REACTION_THANKS OR C_REACTION_HEART OR C_REACTION_HELPFUL OR C_REACTION_USEFUL)
`

type DeleteCommentsReactionParams struct {
	UserID    uuid.UUID `json:"user_id"`
	CommentID uuid.UUID `json:"comment_id"`
}

func (q *Queries) DeleteCommentsReaction(ctx context.Context, arg DeleteCommentsReactionParams) error {
	_, err := q.db.Exec(ctx, deleteCommentsReaction, arg.UserID, arg.CommentID)
	return err
}

const getCommentsReaction = `-- name: GetCommentsReaction :many
SELECT user_id, comment_id, c_reaction_thanks, c_reaction_heart, c_reaction_helpful, c_reaction_useful, created_at FROM COMMENTS_REACTION 
WHERE COMMENT_ID = $1
`

func (q *Queries) GetCommentsReaction(ctx context.Context, commentID uuid.UUID) ([]CommentsReaction, error) {
	rows, err := q.db.Query(ctx, getCommentsReaction, commentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommentsReaction{}
	for rows.Next() {
		var i CommentsReaction
		if err := rows.Scan(
			&i.UserID,
			&i.CommentID,
			&i.CReactionThanks,
			&i.CReactionHeart,
			&i.CReactionHelpful,
			&i.CReactionUseful,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommentsReactionHeartPlusOne = `-- name: UpdateCommentsReactionHeartPlusOne :one
UPDATE COMMENTS_REACTION
SET 
    C_REACTION_HEART = TRUE
WHERE 
    USER_ID = $1 AND COMMENT_ID = $2
RETURNING user_id, comment_id, c_reaction_thanks, c_reaction_heart, c_reaction_helpful, c_reaction_useful, created_at
`

type UpdateCommentsReactionHeartPlusOneParams struct {
	UserID    uuid.UUID `json:"user_id"`
	CommentID uuid.UUID `json:"comment_id"`
}

func (q *Queries) UpdateCommentsReactionHeartPlusOne(ctx context.Context, arg UpdateCommentsReactionHeartPlusOneParams) (CommentsReaction, error) {
	row := q.db.QueryRow(ctx, updateCommentsReactionHeartPlusOne, arg.UserID, arg.CommentID)
	var i CommentsReaction
	err := row.Scan(
		&i.UserID,
		&i.CommentID,
		&i.CReactionThanks,
		&i.CReactionHeart,
		&i.CReactionHelpful,
		&i.CReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

const updateCommentsReactionHelpfulPlusOne = `-- name: UpdateCommentsReactionHelpfulPlusOne :one
UPDATE COMMENTS_REACTION
SET 
    C_REACTION_HELPFUL = TRUE
WHERE 
    USER_ID = $1 AND COMMENT_ID = $2
RETURNING user_id, comment_id, c_reaction_thanks, c_reaction_heart, c_reaction_helpful, c_reaction_useful, created_at
`

type UpdateCommentsReactionHelpfulPlusOneParams struct {
	UserID    uuid.UUID `json:"user_id"`
	CommentID uuid.UUID `json:"comment_id"`
}

func (q *Queries) UpdateCommentsReactionHelpfulPlusOne(ctx context.Context, arg UpdateCommentsReactionHelpfulPlusOneParams) (CommentsReaction, error) {
	row := q.db.QueryRow(ctx, updateCommentsReactionHelpfulPlusOne, arg.UserID, arg.CommentID)
	var i CommentsReaction
	err := row.Scan(
		&i.UserID,
		&i.CommentID,
		&i.CReactionThanks,
		&i.CReactionHeart,
		&i.CReactionHelpful,
		&i.CReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

const updateCommentsReactionThanksPlusOne = `-- name: UpdateCommentsReactionThanksPlusOne :one
UPDATE COMMENTS_REACTION
SET 
    C_REACTION_THANKS = TRUE
WHERE 
    USER_ID = $1 AND COMMENT_ID = $2
RETURNING user_id, comment_id, c_reaction_thanks, c_reaction_heart, c_reaction_helpful, c_reaction_useful, created_at
`

type UpdateCommentsReactionThanksPlusOneParams struct {
	UserID    uuid.UUID `json:"user_id"`
	CommentID uuid.UUID `json:"comment_id"`
}

func (q *Queries) UpdateCommentsReactionThanksPlusOne(ctx context.Context, arg UpdateCommentsReactionThanksPlusOneParams) (CommentsReaction, error) {
	row := q.db.QueryRow(ctx, updateCommentsReactionThanksPlusOne, arg.UserID, arg.CommentID)
	var i CommentsReaction
	err := row.Scan(
		&i.UserID,
		&i.CommentID,
		&i.CReactionThanks,
		&i.CReactionHeart,
		&i.CReactionHelpful,
		&i.CReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

const updateCommentsReactionUsefulPlusOne = `-- name: UpdateCommentsReactionUsefulPlusOne :one
UPDATE COMMENTS_REACTION
SET 
    C_REACTION_USEFUL = TRUE
WHERE 
    USER_ID = $1 AND COMMENT_ID = $2
RETURNING user_id, comment_id, c_reaction_thanks, c_reaction_heart, c_reaction_helpful, c_reaction_useful, created_at
`

type UpdateCommentsReactionUsefulPlusOneParams struct {
	UserID    uuid.UUID `json:"user_id"`
	CommentID uuid.UUID `json:"comment_id"`
}

func (q *Queries) UpdateCommentsReactionUsefulPlusOne(ctx context.Context, arg UpdateCommentsReactionUsefulPlusOneParams) (CommentsReaction, error) {
	row := q.db.QueryRow(ctx, updateCommentsReactionUsefulPlusOne, arg.UserID, arg.CommentID)
	var i CommentsReaction
	err := row.Scan(
		&i.UserID,
		&i.CommentID,
		&i.CReactionThanks,
		&i.CReactionHeart,
		&i.CReactionHelpful,
		&i.CReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: adminuser.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAdminUser = `-- name: CreateAdminUser :one
INSERT INTO ADMINUSER (
    admin_id,
    EMAIL,
    HASHPASSWORD,
    STAFF_NAME,
    DEPARTMENT
) VALUES(
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING email, hashpassword, staff_name, department, joined_at, admin_id
`

type CreateAdminUserParams struct {
	AdminID      uuid.UUID `json:"admin_id"`
	Email        string    `json:"email"`
	Hashpassword string    `json:"hashpassword"`
	StaffName    string    `json:"staff_name"`
	Department   string    `json:"department"`
}

func (q *Queries) CreateAdminUser(ctx context.Context, arg CreateAdminUserParams) (Adminuser, error) {
	row := q.db.QueryRow(ctx, createAdminUser,
		arg.AdminID,
		arg.Email,
		arg.Hashpassword,
		arg.StaffName,
		arg.Department,
	)
	var i Adminuser
	err := row.Scan(
		&i.Email,
		&i.Hashpassword,
		&i.StaffName,
		&i.Department,
		&i.JoinedAt,
		&i.AdminID,
	)
	return i, err
}

const deleteAdminUser = `-- name: DeleteAdminUser :exec
DELETE FROM ADMINUSER
WHERE
    EMAIL = $1
`

func (q *Queries) DeleteAdminUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteAdminUser, email)
	return err
}

const getAdminLogin = `-- name: GetAdminLogin :one
SELECT
    admin_id,
    HASHPASSWORD
FROM
    ADMINUSER
WHERE
    EMAIL = $1 LIMIT 1
`

type GetAdminLoginRow struct {
	AdminID      uuid.UUID `json:"admin_id"`
	Hashpassword string    `json:"hashpassword"`
}

func (q *Queries) GetAdminLogin(ctx context.Context, email string) (GetAdminLoginRow, error) {
	row := q.db.QueryRow(ctx, getAdminLogin, email)
	var i GetAdminLoginRow
	err := row.Scan(&i.AdminID, &i.Hashpassword)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: token.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO TOKEN (
    ID,
    USER_ID,
    ACCESS_TOKEN,
    ROLES,
    STATUS,
    EXPIRES_AT
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id, user_id, access_token, roles, status, take_at, expires_at
`

type CreateTokenParams struct {
	ID          uuid.UUID        `json:"id"`
	UserID      uuid.UUID        `json:"user_id"`
	AccessToken string           `json:"access_token"`
	Roles       string           `json:"roles"`
	Status      string           `json:"status"`
	ExpiresAt   pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.ID,
		arg.UserID,
		arg.AccessToken,
		arg.Roles,
		arg.Status,
		arg.ExpiresAt,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.Roles,
		&i.Status,
		&i.TakeAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT
    id, user_id, access_token, roles, status, take_at, expires_at
FROM
    TOKEN
WHERE
    ID = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Token, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.Roles,
		&i.Status,
		&i.TakeAt,
		&i.ExpiresAt,
	)
	return i, err
}

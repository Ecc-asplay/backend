// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts_reaction.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPostsReaction = `-- name: CreatePostsReaction :one
INSERT INTO POSTS_REACTION (
    USER_ID,
    POST_ID,
    P_REACTION_THANKS,
    P_REACTION_HELPFUL,
    P_REACTION_USEFUL,
    P_REACTION_HEART
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING user_id, post_id, p_reaction_thanks, p_reaction_heart, p_reaction_helpful, p_reaction_useful, created_at
`

type CreatePostsReactionParams struct {
	UserID           uuid.UUID   `json:"user_id"`
	PostID           uuid.UUID   `json:"post_id"`
	PReactionThanks  pgtype.Bool `json:"p_reaction_thanks"`
	PReactionHelpful pgtype.Bool `json:"p_reaction_helpful"`
	PReactionUseful  pgtype.Bool `json:"p_reaction_useful"`
	PReactionHeart   pgtype.Bool `json:"p_reaction_heart"`
}

func (q *Queries) CreatePostsReaction(ctx context.Context, arg CreatePostsReactionParams) (PostsReaction, error) {
	row := q.db.QueryRow(ctx, createPostsReaction,
		arg.UserID,
		arg.PostID,
		arg.PReactionThanks,
		arg.PReactionHelpful,
		arg.PReactionUseful,
		arg.PReactionHeart,
	)
	var i PostsReaction
	err := row.Scan(
		&i.UserID,
		&i.PostID,
		&i.PReactionThanks,
		&i.PReactionHeart,
		&i.PReactionHelpful,
		&i.PReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

const deletePostsReaction = `-- name: DeletePostsReaction :exec
DELETE FROM POSTS_REACTION
WHERE 
    USER_ID = $1 AND POST_ID = $2
    AND NOT (P_REACTION_THANKS OR P_REACTION_HEART OR P_REACTION_HELPFUL OR P_REACTION_USEFUL)
`

type DeletePostsReactionParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) DeletePostsReaction(ctx context.Context, arg DeletePostsReactionParams) error {
	_, err := q.db.Exec(ctx, deletePostsReaction, arg.UserID, arg.PostID)
	return err
}

const getPostsReaction = `-- name: GetPostsReaction :many
SELECT user_id, post_id, p_reaction_thanks, p_reaction_heart, p_reaction_helpful, p_reaction_useful, created_at FROM POSTS_REACTION 
WHERE POST_ID = $1
`

func (q *Queries) GetPostsReaction(ctx context.Context, postID uuid.UUID) ([]PostsReaction, error) {
	rows, err := q.db.Query(ctx, getPostsReaction, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostsReaction{}
	for rows.Next() {
		var i PostsReaction
		if err := rows.Scan(
			&i.UserID,
			&i.PostID,
			&i.PReactionThanks,
			&i.PReactionHeart,
			&i.PReactionHelpful,
			&i.PReactionUseful,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostsReactionHeartPlusOne = `-- name: UpdatePostsReactionHeartPlusOne :one
UPDATE POSTS_REACTION
SET 
    P_REACTION_HEART = TRUE
WHERE 
    USER_ID = $1 AND POST_ID = $2
RETURNING user_id, post_id, p_reaction_thanks, p_reaction_heart, p_reaction_helpful, p_reaction_useful, created_at
`

type UpdatePostsReactionHeartPlusOneParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) UpdatePostsReactionHeartPlusOne(ctx context.Context, arg UpdatePostsReactionHeartPlusOneParams) (PostsReaction, error) {
	row := q.db.QueryRow(ctx, updatePostsReactionHeartPlusOne, arg.UserID, arg.PostID)
	var i PostsReaction
	err := row.Scan(
		&i.UserID,
		&i.PostID,
		&i.PReactionThanks,
		&i.PReactionHeart,
		&i.PReactionHelpful,
		&i.PReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

const updatePostsReactionHelpfulPlusOne = `-- name: UpdatePostsReactionHelpfulPlusOne :one
UPDATE POSTS_REACTION
SET 
    P_REACTION_HELPFUL = TRUE
WHERE 
    USER_ID = $1 AND POST_ID = $2
RETURNING user_id, post_id, p_reaction_thanks, p_reaction_heart, p_reaction_helpful, p_reaction_useful, created_at
`

type UpdatePostsReactionHelpfulPlusOneParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) UpdatePostsReactionHelpfulPlusOne(ctx context.Context, arg UpdatePostsReactionHelpfulPlusOneParams) (PostsReaction, error) {
	row := q.db.QueryRow(ctx, updatePostsReactionHelpfulPlusOne, arg.UserID, arg.PostID)
	var i PostsReaction
	err := row.Scan(
		&i.UserID,
		&i.PostID,
		&i.PReactionThanks,
		&i.PReactionHeart,
		&i.PReactionHelpful,
		&i.PReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

const updatePostsReactionThanksPlusOne = `-- name: UpdatePostsReactionThanksPlusOne :one
UPDATE POSTS_REACTION
SET 
    P_REACTION_THANKS = TRUE
WHERE 
    USER_ID = $1 AND POST_ID = $2
RETURNING user_id, post_id, p_reaction_thanks, p_reaction_heart, p_reaction_helpful, p_reaction_useful, created_at
`

type UpdatePostsReactionThanksPlusOneParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) UpdatePostsReactionThanksPlusOne(ctx context.Context, arg UpdatePostsReactionThanksPlusOneParams) (PostsReaction, error) {
	row := q.db.QueryRow(ctx, updatePostsReactionThanksPlusOne, arg.UserID, arg.PostID)
	var i PostsReaction
	err := row.Scan(
		&i.UserID,
		&i.PostID,
		&i.PReactionThanks,
		&i.PReactionHeart,
		&i.PReactionHelpful,
		&i.PReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

const updatePostsReactionUsefulPlusOne = `-- name: UpdatePostsReactionUsefulPlusOne :one
UPDATE POSTS_REACTION
SET 
    P_REACTION_USEFUL = TRUE
WHERE 
    USER_ID = $1 AND POST_ID = $2
RETURNING user_id, post_id, p_reaction_thanks, p_reaction_heart, p_reaction_helpful, p_reaction_useful, created_at
`

type UpdatePostsReactionUsefulPlusOneParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) UpdatePostsReactionUsefulPlusOne(ctx context.Context, arg UpdatePostsReactionUsefulPlusOneParams) (PostsReaction, error) {
	row := q.db.QueryRow(ctx, updatePostsReactionUsefulPlusOne, arg.UserID, arg.PostID)
	var i PostsReaction
	err := row.Scan(
		&i.UserID,
		&i.PostID,
		&i.PReactionThanks,
		&i.PReactionHeart,
		&i.PReactionHelpful,
		&i.PReactionUseful,
		&i.CreatedAt,
	)
	return i, err
}

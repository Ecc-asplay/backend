// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Ecc-asplay/backend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	db "github.com/Ecc-asplay/backend/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAdminUser mocks base method.
func (m *MockStore) CreateAdminUser(arg0 context.Context, arg1 db.CreateAdminUserParams) (db.Adminuser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminUser", arg0, arg1)
	ret0, _ := ret[0].(db.Adminuser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminUser indicates an expected call of CreateAdminUser.
func (mr *MockStoreMockRecorder) CreateAdminUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminUser", reflect.TypeOf((*MockStore)(nil).CreateAdminUser), arg0, arg1)
}

// CreateBlock mocks base method.
func (m *MockStore) CreateBlock(arg0 context.Context, arg1 db.CreateBlockParams) (db.Blockuser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlock", arg0, arg1)
	ret0, _ := ret[0].(db.Blockuser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlock indicates an expected call of CreateBlock.
func (mr *MockStoreMockRecorder) CreateBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlock", reflect.TypeOf((*MockStore)(nil).CreateBlock), arg0, arg1)
}

// CreateBookmarks mocks base method.
func (m *MockStore) CreateBookmarks(arg0 context.Context, arg1 db.CreateBookmarksParams) (db.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmarks", arg0, arg1)
	ret0, _ := ret[0].(db.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmarks indicates an expected call of CreateBookmarks.
func (mr *MockStoreMockRecorder) CreateBookmarks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmarks", reflect.TypeOf((*MockStore)(nil).CreateBookmarks), arg0, arg1)
}

// CreateComments mocks base method.
func (m *MockStore) CreateComments(arg0 context.Context, arg1 db.CreateCommentsParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComments", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComments indicates an expected call of CreateComments.
func (mr *MockStoreMockRecorder) CreateComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComments", reflect.TypeOf((*MockStore)(nil).CreateComments), arg0, arg1)
}

// CreateImage mocks base method.
func (m *MockStore) CreateImage(arg0 context.Context, arg1 db.CreateImageParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockStoreMockRecorder) CreateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockStore)(nil).CreateImage), arg0, arg1)
}

// CreateNotification mocks base method.
func (m *MockStore) CreateNotification(arg0 context.Context, arg1 db.CreateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", arg0, arg1)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockStoreMockRecorder) CreateNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockStore)(nil).CreateNotification), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockStore) CreatePost(arg0 context.Context, arg1 db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockStoreMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStore)(nil).CreatePost), arg0, arg1)
}

// CreateSearchedRecord mocks base method.
func (m *MockStore) CreateSearchedRecord(arg0 context.Context, arg1 db.CreateSearchedRecordParams) (db.Searchrecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSearchedRecord", arg0, arg1)
	ret0, _ := ret[0].(db.Searchrecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSearchedRecord indicates an expected call of CreateSearchedRecord.
func (mr *MockStoreMockRecorder) CreateSearchedRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSearchedRecord", reflect.TypeOf((*MockStore)(nil).CreateSearchedRecord), arg0, arg1)
}

// CreateTag mocks base method.
func (m *MockStore) CreateTag(arg0 context.Context, arg1 db.CreateTagParams) (db.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0, arg1)
	ret0, _ := ret[0].(db.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockStoreMockRecorder) CreateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockStore)(nil).CreateTag), arg0, arg1)
}

// CreateToken mocks base method.
func (m *MockStore) CreateToken(arg0 context.Context, arg1 db.CreateTokenParams) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockStoreMockRecorder) CreateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockStore)(nil).CreateToken), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAdminUser mocks base method.
func (m *MockStore) DeleteAdminUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdminUser indicates an expected call of DeleteAdminUser.
func (mr *MockStoreMockRecorder) DeleteAdminUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminUser", reflect.TypeOf((*MockStore)(nil).DeleteAdminUser), arg0, arg1)
}

// DeleteBookmarks mocks base method.
func (m *MockStore) DeleteBookmarks(arg0 context.Context, arg1 db.DeleteBookmarksParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookmarks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookmarks indicates an expected call of DeleteBookmarks.
func (mr *MockStoreMockRecorder) DeleteBookmarks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookmarks", reflect.TypeOf((*MockStore)(nil).DeleteBookmarks), arg0, arg1)
}

// DeleteComments mocks base method.
func (m *MockStore) DeleteComments(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComments indicates an expected call of DeleteComments.
func (mr *MockStoreMockRecorder) DeleteComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComments", reflect.TypeOf((*MockStore)(nil).DeleteComments), arg0, arg1)
}

// DeleteImage mocks base method.
func (m *MockStore) DeleteImage(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockStoreMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockStore)(nil).DeleteImage), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(arg0 context.Context, arg1 db.DeletePostParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 db.DeleteUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// FindTag mocks base method.
func (m *MockStore) FindTag(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTag", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTag indicates an expected call of FindTag.
func (mr *MockStoreMockRecorder) FindTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTag", reflect.TypeOf((*MockStore)(nil).FindTag), arg0, arg1)
}

// GetAdminLogin mocks base method.
func (m *MockStore) GetAdminLogin(arg0 context.Context, arg1 string) (db.GetAdminLoginRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminLogin", arg0, arg1)
	ret0, _ := ret[0].(db.GetAdminLoginRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminLogin indicates an expected call of GetAdminLogin.
func (mr *MockStoreMockRecorder) GetAdminLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminLogin", reflect.TypeOf((*MockStore)(nil).GetAdminLogin), arg0, arg1)
}

// GetAllBlockUsersList mocks base method.
func (m *MockStore) GetAllBlockUsersList(arg0 context.Context) ([]db.Blockuser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBlockUsersList", arg0)
	ret0, _ := ret[0].([]db.Blockuser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBlockUsersList indicates an expected call of GetAllBlockUsersList.
func (mr *MockStoreMockRecorder) GetAllBlockUsersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBlockUsersList", reflect.TypeOf((*MockStore)(nil).GetAllBlockUsersList), arg0)
}

// GetAllBookmarks mocks base method.
func (m *MockStore) GetAllBookmarks(arg0 context.Context, arg1 uuid.UUID) ([]db.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBookmarks", arg0, arg1)
	ret0, _ := ret[0].([]db.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBookmarks indicates an expected call of GetAllBookmarks.
func (mr *MockStoreMockRecorder) GetAllBookmarks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBookmarks", reflect.TypeOf((*MockStore)(nil).GetAllBookmarks), arg0, arg1)
}

// GetAllComments mocks base method.
func (m *MockStore) GetAllComments(arg0 context.Context, arg1 uuid.UUID) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComments", arg0, arg1)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllComments indicates an expected call of GetAllComments.
func (mr *MockStoreMockRecorder) GetAllComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComments", reflect.TypeOf((*MockStore)(nil).GetAllComments), arg0, arg1)
}

// GetBlockUserlist mocks base method.
func (m *MockStore) GetBlockUserlist(arg0 context.Context, arg1 uuid.UUID) ([]db.Blockuser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockUserlist", arg0, arg1)
	ret0, _ := ret[0].([]db.Blockuser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockUserlist indicates an expected call of GetBlockUserlist.
func (mr *MockStoreMockRecorder) GetBlockUserlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockUserlist", reflect.TypeOf((*MockStore)(nil).GetBlockUserlist), arg0, arg1)
}

// GetCommentsList mocks base method.
func (m *MockStore) GetCommentsList(arg0 context.Context, arg1 uuid.UUID) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsList", arg0, arg1)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsList indicates an expected call of GetCommentsList.
func (mr *MockStoreMockRecorder) GetCommentsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsList", reflect.TypeOf((*MockStore)(nil).GetCommentsList), arg0, arg1)
}

// GetImage mocks base method.
func (m *MockStore) GetImage(arg0 context.Context, arg1 uuid.UUID) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0, arg1)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockStoreMockRecorder) GetImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockStore)(nil).GetImage), arg0, arg1)
}

// GetLogin mocks base method.
func (m *MockStore) GetLogin(arg0 context.Context, arg1 string) (db.GetLoginRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", arg0, arg1)
	ret0, _ := ret[0].(db.GetLoginRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockStoreMockRecorder) GetLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockStore)(nil).GetLogin), arg0, arg1)
}

// GetNotification mocks base method.
func (m *MockStore) GetNotification(arg0 context.Context, arg1 uuid.UUID) ([]db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", arg0, arg1)
	ret0, _ := ret[0].([]db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockStoreMockRecorder) GetNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockStore)(nil).GetNotification), arg0, arg1)
}

// GetPostsList mocks base method.
func (m *MockStore) GetPostsList(arg0 context.Context) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsList", arg0)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsList indicates an expected call of GetPostsList.
func (mr *MockStoreMockRecorder) GetPostsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsList", reflect.TypeOf((*MockStore)(nil).GetPostsList), arg0)
}

// GetSearchedRecordList mocks base method.
func (m *MockStore) GetSearchedRecordList(arg0 context.Context) ([]db.Searchrecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchedRecordList", arg0)
	ret0, _ := ret[0].([]db.Searchrecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchedRecordList indicates an expected call of GetSearchedRecordList.
func (mr *MockStoreMockRecorder) GetSearchedRecordList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchedRecordList", reflect.TypeOf((*MockStore)(nil).GetSearchedRecordList), arg0)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUserAllPosts mocks base method.
func (m *MockStore) GetUserAllPosts(arg0 context.Context, arg1 uuid.UUID) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAllPosts", arg0, arg1)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAllPosts indicates an expected call of GetUserAllPosts.
func (mr *MockStoreMockRecorder) GetUserAllPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAllPosts", reflect.TypeOf((*MockStore)(nil).GetUserAllPosts), arg0, arg1)
}

// GetUserData mocks base method.
func (m *MockStore) GetUserData(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockStoreMockRecorder) GetUserData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockStore)(nil).GetUserData), arg0, arg1)
}

// ResetPassword mocks base method.
func (m *MockStore) ResetPassword(arg0 context.Context, arg1 db.ResetPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockStoreMockRecorder) ResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockStore)(nil).ResetPassword), arg0, arg1)
}

// SearchPost mocks base method.
func (m *MockStore) SearchPost(arg0 context.Context, arg1 string) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPost", arg0, arg1)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPost indicates an expected call of SearchPost.
func (mr *MockStoreMockRecorder) SearchPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPost", reflect.TypeOf((*MockStore)(nil).SearchPost), arg0, arg1)
}

// UnBlockUser mocks base method.
func (m *MockStore) UnBlockUser(arg0 context.Context, arg1 db.UnBlockUserParams) (db.Blockuser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBlockUser", arg0, arg1)
	ret0, _ := ret[0].(db.Blockuser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnBlockUser indicates an expected call of UnBlockUser.
func (mr *MockStoreMockRecorder) UnBlockUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBlockUser", reflect.TypeOf((*MockStore)(nil).UnBlockUser), arg0, arg1)
}

// UpdateComments mocks base method.
func (m *MockStore) UpdateComments(arg0 context.Context, arg1 db.UpdateCommentsParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComments", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComments indicates an expected call of UpdateComments.
func (mr *MockStoreMockRecorder) UpdateComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComments", reflect.TypeOf((*MockStore)(nil).UpdateComments), arg0, arg1)
}

// UpdateDiseaseAndCondition mocks base method.
func (m *MockStore) UpdateDiseaseAndCondition(arg0 context.Context, arg1 db.UpdateDiseaseAndConditionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiseaseAndCondition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiseaseAndCondition indicates an expected call of UpdateDiseaseAndCondition.
func (mr *MockStoreMockRecorder) UpdateDiseaseAndCondition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiseaseAndCondition", reflect.TypeOf((*MockStore)(nil).UpdateDiseaseAndCondition), arg0, arg1)
}

// UpdateEmail mocks base method.
func (m *MockStore) UpdateEmail(arg0 context.Context, arg1 db.UpdateEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockStoreMockRecorder) UpdateEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockStore)(nil).UpdateEmail), arg0, arg1)
}

// UpdateImage mocks base method.
func (m *MockStore) UpdateImage(arg0 context.Context, arg1 db.UpdateImageParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockStoreMockRecorder) UpdateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockStore)(nil).UpdateImage), arg0, arg1)
}

// UpdateIsPrivacy mocks base method.
func (m *MockStore) UpdateIsPrivacy(arg0 context.Context, arg1 db.UpdateIsPrivacyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsPrivacy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsPrivacy indicates an expected call of UpdateIsPrivacy.
func (mr *MockStoreMockRecorder) UpdateIsPrivacy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsPrivacy", reflect.TypeOf((*MockStore)(nil).UpdateIsPrivacy), arg0, arg1)
}

// UpdateName mocks base method.
func (m *MockStore) UpdateName(arg0 context.Context, arg1 db.UpdateNameParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockStoreMockRecorder) UpdateName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockStore)(nil).UpdateName), arg0, arg1)
}

// UpdateNotification mocks base method.
func (m *MockStore) UpdateNotification(arg0 context.Context, arg1 uuid.UUID) ([]db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", arg0, arg1)
	ret0, _ := ret[0].([]db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockStoreMockRecorder) UpdateNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockStore)(nil).UpdateNotification), arg0, arg1)
}

// UpdatePosts mocks base method.
func (m *MockStore) UpdatePosts(arg0 context.Context, arg1 db.UpdatePostsParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePosts", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePosts indicates an expected call of UpdatePosts.
func (mr *MockStoreMockRecorder) UpdatePosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePosts", reflect.TypeOf((*MockStore)(nil).UpdatePosts), arg0, arg1)
}
